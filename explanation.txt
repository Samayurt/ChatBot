# AI Chat Assistant Code Explanation

## Simple Architecture Overview

This code implements an AI Chat Assistant using Streamlit, a web application framework for Python. The assistant can operate in three modes:

1. General Chat
2. Document Q&A
3. Appointment Booking

The application follows this basic flow:

1. User authentication
2. Mode selection
3. Chat interface
4. Processing user input and generating responses

## How It Works (Simple Language)

1. When you start the app, it asks for your information (name, email, age, phone).
2. After you're logged in, you can choose how you want to chat:
   - Just talk normally
   - Ask questions about documents you upload
   - Book appointments
3. You type your messages, and the AI responds.
4. If you're asking about documents, you can upload PDFs, and the AI will read them to answer your questions.
5. If you're booking appointments, the AI will guide you through picking a date and time.

## Module Responsibilities

### Main Functions

1. `main()`: This is the central function that sets up the Streamlit app and controls the overall flow.

2. `authenticate_user()`: Handles the user authentication process, asking for name, email, age, and phone number.

3. `chat_interface()`: Manages the main chat interaction between the user and the AI.

4. `process_documents()`: Handles document uploading and processing for the Document Q&A mode.

### Helper Functions

5. `set_custom_css()`: Sets up the visual style of the chat interface.

6. `get_llama2_response()`: Generates AI responses using the Llama 2 model.

7. `get_pdf_text()`: Extracts text from uploaded PDF documents.

8. `get_text_chunks()`: Splits the extracted text into smaller chunks for processing.

9. `get_vectorstore()`: Creates a vector representation of the text chunks for efficient searching.

10. `get_conversation_chain()`: Sets up the conversation chain for document-based Q&A.

11. `validate_email()`, `validate_age()`, `validate_phone()`: Validate user inputs during authentication.

12. `save_user_info()`, `load_user_info()`: Handle saving and loading user information.

13. `save_appointment()`, `load_appointments()`, `get_available_slots()`, `get_user_appointments()`: Manage appointment booking functionality.

### Key Libraries and Their Roles

- Streamlit: Creates the web interface.
- dotenv: Loads environment variables.
- PyPDF2: Extracts text from PDF files.
- langchain: Provides tools for building language model applications.
- FAISS: Enables efficient similarity search and clustering of dense vectors.
- CTransformers: Interfaces with the Llama 2 language model.

## Detailed Explanation of Key Components

1. **User Authentication**
   - The `authenticate_user()` function handles this process.
   - It asks the user for their name, email, age, and phone number.
   - Each input is validated using specific validation functions.
   - User information is saved for future use.

2. **Chat Modes**
   - The app supports three modes: General, Document QnA, and Appointment Booking.
   - Users can switch between modes using a radio button in the sidebar.

3. **Document Processing**
   - When in Document QnA mode, users can upload PDF files.
   - The `process_documents()` function handles the uploaded files:
     - Extracts text from PDFs
     - Splits text into chunks
     - Creates a vector store for efficient querying

4. **Chat Interface**
   - The `chat_interface()` function manages the main chat interaction.
   - It displays the chat history and processes new user inputs.
   - Depending on the selected mode, it routes the user input to the appropriate handling function.

5. **Response Generation**
   - For general chat, it uses the Llama 2 model via `get_llama2_response()`.
   - For document Q&A, it uses the conversation chain created from the processed documents.
   - For appointment booking, it follows a step-by-step process to collect date, time, and reason.

6. **Appointment Booking**
   - The app maintains a list of appointments in a JSON file.
   - It checks for available slots and prevents double-booking.
   - Users can view their existing appointments.

7. **State Management**
   - The app uses Streamlit's session state to maintain information across reloads, such as chat history and user authentication status.

